buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
    }
}

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'nebula.release' version '13.2.1'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'com.github.hierynomus.license'

repositories {
    jcenter()
}

group = 'org.gradle'
description = 'Allow failed test to rerun to discover flaky tests'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

configurations {
    plugin.description = 'The compile dependencies for the plugin, excluding the local dependencies to avoid problems with Shadow'
    implementation.extendsFrom plugin
}

dependencies {
    // TODO shade this
    plugin 'org.ow2.asm:asm:7.2'

    testImplementation "org.codehaus.groovy:groovy-all:2.5.7"
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
    testImplementation "com.google.guava:guava:28.1-android"
    testImplementation gradleTestKit()
    testImplementation "net.sourceforge.nekohtml:nekohtml:1.9.14"
}

shadowJar {
    configurations = [project.configurations.plugin]
    classifier = null
    dependencies {
        include(dependency('org.ow2.asm:asm'))
    }
    relocate 'org.objectweb.asm', 'io.gradle.testretry.org.objectweb.asm'
}

//jar.deleteAllActions()
//jar.dependsOn shadowJar

publishing {
    publications {
        withType(MavenPublication) {
            pom.withXml {
                asNode()
                        .dependencies
                        .dependency
                        .findAll {
                            ['asm'].contains(it.artifactId.text())
                        }
                        .each { it.parent().remove(it) }
            }
        }
    }
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"

    if (!System.getenv("CI")) {
        publishAlways()
        tag("CI")
    }
}

gradlePlugin {
    plugins {
        register("test-retry-plugin") {
            id = "org.gradle.test-retry"
            displayName = "Gradle test retry plugin"
            description = project.description
            implementationClass = "org.gradle.plugins.testretry.TestRetryPlugin"
        }
    }
}

System.setProperty("gradle.publish.skip.namespace.check", "true")

pluginBundle {
    website = 'https://github.com/gradle/test-retry-gradle-plugin'
    vcsUrl = 'https://github.com/gradle/test-retry-gradle-plugin.git'
    description = project.description
    tags = ['test', 'flaky']

    mavenCoordinates {
        groupId = 'org.gradle'
        artifactId = 'test-retry-gradle-plugin'
    }
}

license {
    header = file('gradle/licenseHeader.txt')
    exclude '**/*.tokens'
    mapping {
        kt = 'JAVADOC_STYLE'
    }
    sourceSets = project.sourceSets
    strictCheck = true
}

publishing {
    repositories {
        maven {
            name = "GradleBuildInternal"
            url = gradleInternalRepositoryUrl()
            credentials {
                username = project.findProperty("artifactoryUsername")
                password = project.findProperty("artifactoryPassword")
            }
        }
    }
}

String gradleInternalRepositoryUrl() {
    def isSnapshot = !gradle.startParameter.taskNames.contains('release')
    def repositoryQualifier =  isSnapshot ? "snapshots" : "releases"
    return uri("https://repo.gradle.org/gradle/libs-$repositoryQualifier-local")
}

tasks.withType(Test) {
    systemProperty 'org.gradle.test.currentGradleVersion', gradle.gradleVersion
}

task testAll(type:Test) {
    systemProperty 'org.gradle.test.allGradleVersions', true
}

afterEvaluate { project ->
    println "I'm building $project.name with version $project.version"
}
